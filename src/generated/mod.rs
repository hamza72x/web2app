// Auto generated by $ make build_template
// Don't edit this file by HAND, edit the ../template directory instead.
// Then run $ make build_template

pub const MAIN_RS: &str = "";

pub const CARGO_TOML: &str = "W3BhY2thZ2VdCm5hbWUgPSAiYXBwX25hbWVfbG93ZXJjYXNlZCIKZGVzY3JpcHRpb24gPSAidGVzdF9kZXNjcmlwdGlvbiIKdmVyc2lvbiA9ICIwLjEuMCIKZWRpdGlvbiA9ICIyMDIxIgpwYXRoID0gInNyYy9tYWluLnJzIgoKW2RlcGVuZGVuY2llc10Kd3J5ID0gIjAuMjMuMyIKdGFvID0gIjAuMTUuNiIKaG9tZSA9ICIwLjUuNCIKc2VyZGVfanNvbiA9ICIxLjAuOTQiCnNlcmRlID0gIjEuMC4xNTQiCgpbcGFja2FnZS5tZXRhZGF0YS5idW5kbGVdCm5hbWUgPSAiQXBwTmFtZSIKaWRlbnRpZmllciA9ICJjb20uZXhhbXBsZS50ZXN0IgppY29uID0gWyIzMngzMi5wbmciLCAiMTI4eDEyOC5wbmciXQp2ZXJzaW9uID0gIjAuMS4wIgpyZXNvdXJjZXMgPSBbXQpjb3B5cmlnaHQgPSAiQ29weXJpZ2h0IMKpIGF1dGhvcl9uYW1lIgpjYXRlZ29yeSA9ICJEZXZlbG9wZXIgVG9vbCIKc2hvcnRfZGVzY3JpcHRpb24gPSAiQW4gZXhhbXBsZSBhcHBsaWNhdGlvbi4iCmxvbmdfZGVzY3JpcHRpb24gPSAiIiIKTG9yZW0gaXBzdW0gZG9sb3Igc2l0IGFtZXQsIGNvbnNlY3RldHVyIGFkaXBpc2NpbmcgZWxpdCwgc2VkIGRvCmVpdXNtb2QgdGVtcG9yIGluY2lkaWR1bnQgdXQgbGFib3JlIGV0IGRvbG9yZSBtYWduYSBhbGlxdWEuICBVdAplbmltIGFkIG1pbmltIHZlbmlhbSwgcXVpcyBub3N0cnVkIGV4ZXJjaXRhdGlvbiB1bGxhbWNvIGxhYm9yaXMKbmlzaSB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LgoiIiIKZGViX2RlcGVuZHMgPSBbXQpvc3hfZnJhbWV3b3JrcyA9IFtdCm9zeF91cmxfc2NoZW1lcyA9IFtdCgpbcHJvZmlsZS5yZWxlYXNlXQpzdHJpcCA9IHRydWUKcGFuaWMgPSAiYWJvcnQiCmNvZGVnZW4tdW5pdHMgPSAxCmx0byA9ICJ0aGluIgpvcHQtbGV2ZWwgPSAicyIK";
